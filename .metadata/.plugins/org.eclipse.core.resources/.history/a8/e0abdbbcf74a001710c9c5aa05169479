/* ******************************************************************/
/* File name:        serial_hal.c                                   */
/* File description: Implementation of the functions to establish a	*/
/*					 Serial communication							*/
/* Author name:      Gustavo e Lucas                                */
/* Creation date:    12april2017                                    */
/* Revision date:    01june2017                                     */
/* ******************************************************************/

#include "serial_hal.h"

#define SIZE_BUFFER 40
static char cBuffer[SIZE_BUFFER]; //Circular buffer
static int iHead=0, iElements=0;

void UART0_IRQHandler (void){

	NVIC_DisableIRQ(UART0_IRQn);
	char cChar;

	cChar = GETCHAR();
	PUTCHAR(cChar);
	serial_insereBuffer(cChar);

	NVIC_EnableIRQ(UART0_IRQn);
}

/* ******************************************************** */
/* Method name:        serial_insereBuffer             		*/
/* Method description: inserts a Character on the buffer	*/
/* Input params:       char cChar = char to be inserted		*/
/* Output params:      n/a                          		*/
/* ******************************************************** */
void serial_insereBuffer(char cChar){
	iHead++;
	iElements++;

	if(iHead==SIZE_BUFFER)
		iHead =0;
	cBuffer[iHead]= cChar;

	return;
}

/* ******************************************************** */
/* Method name:        serial_retiraBuffer             		*/
/* Method description: removes a Character from the buffer	*/
/* Input params:       n/a                          		*/
/* Output params:      char cChar = char that was removed	*/
/* ******************************************************** */
char serial_retiraBuffer(void){
	iElements--;
	return cBuffer[(SIZE_BUFFER + iHead-iElements)%SIZE_BUFFER];
}

/* ******************************************************** */
/* Method name:        setConfig                    		*/
/* Method description: Initialize the serial communication	*/
/* Input params:       n/a                          		*/
/* Output params:      n/a                          		*/
/* ******************************************************** */
void serial_setConfig(void){
	debugUart_init();
	UART0_C2 |=UART0_C2_RIE(1);
    NVIC_SetPriority(UART0_IRQn,2);

}

/* **************************************************************************/
/* Method name:        sendBuffer                    						*/
/* Method description: sends a String to the UART serial communication port */
/* Input params:       cBuffer = String to be sent							*/
/*					   iSize   = Size of the String							*/
/* Output params:      n/a                          						*/
/* **************************************************************************/
void serial_sendBuffer(char cBuffer[], int iSize){
    int i=0;
    for(i=0;i<iSize;i++)
    	PUTCHAR(cBuffer[i]);
}

/* *************************************************************/
/* Method name:        serial_sendNumber              		   */
/* Method description: Write number with one decimal digit     */
/* Input params:       float fNmbr = Number to be printed      */
/* Output params:      n/a                          		   */
/* *************************************************************/
void serial_sendNumber(float fNmbr)
{

	int i,j=0;
	int iMod = 0;
	int iDiv = fNmbr*10;
	char cNmbr[6];


	if(fNmbr>999) PUTCHAR('+');
	else if(fNmbr >99) j=1;
	else if(fNmbr >9) j=2;
	else j=3;


	iMod = iDiv%10;
	iDiv = iDiv/10;
	cNmbr[5-j] = iMod +'0';
	cNmbr[4-j] = ',';

	for(i=3-j;i>=0;i--){
		iMod = iDiv%10;
		iDiv = iDiv/10;
		cNmbr[i] = iMod +'0';

	}



	serial_sendBuffer(cNmbr,6-j);



}

/* **********************************************************************/
/* Method name:        serial_interpretCmd            		   			*/
/* Method description: Reads from the buffer and interprets the Command */
/* Output params:      n/a                          		   			*/
/* Output params:      n/a                          		   			*/
/* **********************************************************************/
void serial_interpretCmd(){

	char cRes[SERIAL_VECTORSIZE];
	char cEnter[2],cChar;
	int iSize;

	cEnter[0]=13;
	cEnter[1]=10;
	while(iElements!=0)
	{
		cChar= serial_retiraBuffer();
		iSize = cmdmachine_interpretCmd(cChar, cRes);
		if(iSize>0){
	//		serial_sendBuffer("Response:");
	//		serial_sendBuffer(cEnter);
			serial_sendBuffer(cRes,iSize);
			serial_sendBuffer(cEnter,2);
		}
	}
}

